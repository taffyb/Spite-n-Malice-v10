import { Injector } from '@angular/core';
import { AngularPageVisibilityService } from './angular-page-visibility.service';
const providers = [
    { provide: AngularPageVisibilityService, deps: [] },
];
const injector = Injector.create({ providers: providers });
const pageVisibilityService = injector.get(AngularPageVisibilityService);
export function OnPageVisibilityChange() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        let onPageHiddenSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        const originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function (...args) {
            onPageHiddenSubscription = pageVisibilityService.$onPageVisibilityChange.subscribe((visibilityState) => originalMethod.call(this, [visibilityState]));
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        const originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function (...args) {
            onPageHiddenSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPageHidden() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        let onPageHiddenSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        const originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function (...args) {
            onPageHiddenSubscription = pageVisibilityService.$onPageHidden.subscribe(() => originalMethod.call(this));
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        const originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function (...args) {
            onPageHiddenSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPageVisible() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        const originalNgOnInit = target.ngOnInit;
        let onPageVisibleSubscription;
        target.ngOnInit = function (...args) {
            onPageVisibleSubscription = pageVisibilityService.$onPageVisible.subscribe(() => originalMethod.call(this));
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        const originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function (...args) {
            onPageVisibleSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPagePrerender() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        let onPagePrerenderSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        const originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function (...args) {
            onPagePrerenderSubscription = pageVisibilityService.$onPagePrerender.subscribe(() => originalMethod.call(this));
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        const originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function (...args) {
            onPagePrerenderSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPageUnloaded() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        let onPageUnloadedSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        const originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function (...args) {
            onPageUnloadedSubscription = pageVisibilityService.$onPageUnloaded.subscribe(() => originalMethod.call(this));
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        const originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function (...args) {
            onPageUnloadedSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
function buildNewMethodNgOnInit(target) {
    newMethod(target, 'ngOnInit');
}
function buildNewMethodNgOnDestroy(target) {
    newMethod(target, 'ngOnDestroy');
}
function newMethod(target, name) {
    Object.defineProperty(target, name, {
        value: function (...args) { },
        writable: true,
    });
}
//# sourceMappingURL=data:application/json;base64,