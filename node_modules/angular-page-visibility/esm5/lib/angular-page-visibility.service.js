import { __decorate, __metadata } from "tslib";
import { Injectable } from "@angular/core";
import { Subject } from "rxjs";
import { AngularPageVisibilityStateEnum } from "./angular-page-visibility.state.enum";
import * as i0 from "@angular/core";
var HiddenKeyConstant = /** @class */ (function () {
    function HiddenKeyConstant() {
    }
    HiddenKeyConstant.DEFAULT = "hidden";
    HiddenKeyConstant.MS = "msHidden";
    HiddenKeyConstant.WEB_KIT = "webkitHidden";
    return HiddenKeyConstant;
}());
var VisibilityStatusConstant = /** @class */ (function () {
    function VisibilityStatusConstant() {
    }
    VisibilityStatusConstant.VISIBLE = "visible";
    VisibilityStatusConstant.HIDDEN = "hidden";
    VisibilityStatusConstant.PRERENDER = "prerender";
    VisibilityStatusConstant.UNLOADED = "unloaded";
    return VisibilityStatusConstant;
}());
var AngularPageVisibilityService = /** @class */ (function () {
    function AngularPageVisibilityService() {
        this.onPageVisibleSource = new Subject();
        this.onPageHiddenSource = new Subject();
        this.onPagePrerenderSource = new Subject();
        this.onPageUnloadedSource = new Subject();
        this.onPageVisibilityChangeSource = new Subject();
        this.$onPageVisible = this.onPageVisibleSource.asObservable();
        this.$onPageHidden = this.onPageHiddenSource.asObservable();
        this.$onPagePrerender = this.onPagePrerenderSource.asObservable();
        this.$onPageUnloaded = this.onPageUnloadedSource.asObservable();
        this.$onPageVisibilityChange = this.onPageVisibilityChangeSource.asObservable();
        this.addEventListenerVibilityChange();
    }
    AngularPageVisibilityService.prototype.isPageVisible = function () {
        return (VisibilityStatusConstant.VISIBLE === this.getVisibilityState() ||
            !this.isHidden());
    };
    AngularPageVisibilityService.prototype.isPageHidden = function () {
        return (VisibilityStatusConstant.HIDDEN === this.getVisibilityState() ||
            this.isHidden());
    };
    AngularPageVisibilityService.prototype.isPagePrerender = function () {
        return VisibilityStatusConstant.PRERENDER === this.getVisibilityState();
    };
    AngularPageVisibilityService.prototype.isPageUnloaded = function () {
        return VisibilityStatusConstant.UNLOADED === this.getVisibilityState();
    };
    AngularPageVisibilityService.prototype.isHidden = function () {
        return document[this.hidden];
    };
    AngularPageVisibilityService.prototype.getVisibilityState = function () {
        return document[this.visibilityState];
    };
    AngularPageVisibilityService.prototype.defineBrowserSupport = function () {
        if (typeof document[HiddenKeyConstant.DEFAULT] !== "undefined") {
            // Opera 12.10 and Firefox 18 and later support
            this.hidden = HiddenKeyConstant.DEFAULT;
            this.visibilityChange = "visibilitychange";
            this.visibilityState = "visibilityState";
        }
        else if (typeof document[HiddenKeyConstant.MS] !== "undefined") {
            this.hidden = HiddenKeyConstant.MS;
            this.visibilityChange = "msvisibilitychange";
            this.visibilityState = "msVisibilityState";
        }
        else if (typeof document[HiddenKeyConstant.WEB_KIT] !== "undefined") {
            this.hidden = HiddenKeyConstant.WEB_KIT;
            this.visibilityChange = "webkitvisibilitychange";
            this.visibilityState = "webkitVisibilityState";
        }
    };
    AngularPageVisibilityService.prototype.addEventListenerVibilityChange = function () {
        var _this = this;
        this.defineBrowserSupport();
        document.addEventListener(this.visibilityChange, function () {
            var vibilityState = _this.getVisibilityState();
            switch (vibilityState) {
                case VisibilityStatusConstant.VISIBLE:
                    _this.onPageVisibilityChangeSource.next(AngularPageVisibilityStateEnum.VISIBLE);
                    _this.onPageVisibleSource.next();
                    break;
                case VisibilityStatusConstant.HIDDEN:
                    _this.onPageVisibilityChangeSource.next(AngularPageVisibilityStateEnum.HIDDEN);
                    _this.onPageHiddenSource.next();
                    break;
                case VisibilityStatusConstant.PRERENDER:
                    _this.onPageVisibilityChangeSource.next(AngularPageVisibilityStateEnum.PRERENDER);
                    _this.onPagePrerenderSource.next();
                    break;
                case VisibilityStatusConstant.UNLOADED:
                    _this.onPageVisibilityChangeSource.next(AngularPageVisibilityStateEnum.UNLOADED);
                    _this.onPageUnloadedSource.next();
                    break;
                default:
                    if (_this.isHidden()) {
                        _this.onPageVisibilityChangeSource.next(AngularPageVisibilityStateEnum.HIDDEN);
                        _this.onPageHiddenSource.next();
                    }
                    else {
                        _this.onPageVisibilityChangeSource.next(AngularPageVisibilityStateEnum.VISIBLE);
                        _this.onPageVisibleSource.next();
                    }
            }
        }, false);
    };
    AngularPageVisibilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AngularPageVisibilityService_Factory() { return new AngularPageVisibilityService(); }, token: AngularPageVisibilityService, providedIn: "root" });
    AngularPageVisibilityService = __decorate([
        Injectable({
            providedIn: "root"
        }),
        __metadata("design:paramtypes", [])
    ], AngularPageVisibilityService);
    return AngularPageVisibilityService;
}());
export { AngularPageVisibilityService };
//# sourceMappingURL=data:application/json;base64,