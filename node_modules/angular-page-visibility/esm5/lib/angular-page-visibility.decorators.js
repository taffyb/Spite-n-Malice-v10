import { Injector } from '@angular/core';
import { AngularPageVisibilityService } from './angular-page-visibility.service';
var providers = [
    { provide: AngularPageVisibilityService, deps: [] },
];
var injector = Injector.create({ providers: providers });
var pageVisibilityService = injector.get(AngularPageVisibilityService);
export function OnPageVisibilityChange() {
    return function (target, propertyKey, descriptor) {
        var originalMethod = descriptor.value;
        var onPageHiddenSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        var originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageHiddenSubscription = pageVisibilityService.$onPageVisibilityChange.subscribe(function (visibilityState) {
                return originalMethod.call(_this, [visibilityState]);
            });
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        var originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageHiddenSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPageHidden() {
    return function (target, propertyKey, descriptor) {
        var originalMethod = descriptor.value;
        var onPageHiddenSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        var originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageHiddenSubscription = pageVisibilityService.$onPageHidden.subscribe(function () { return originalMethod.call(_this); });
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        var originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageHiddenSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPageVisible() {
    return function (target, propertyKey, descriptor) {
        var originalMethod = descriptor.value;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        var originalNgOnInit = target.ngOnInit;
        var onPageVisibleSubscription;
        target.ngOnInit = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageVisibleSubscription = pageVisibilityService.$onPageVisible.subscribe(function () { return originalMethod.call(_this); });
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        var originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageVisibleSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPagePrerender() {
    return function (target, propertyKey, descriptor) {
        var originalMethod = descriptor.value;
        var onPagePrerenderSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        var originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPagePrerenderSubscription = pageVisibilityService.$onPagePrerender.subscribe(function () { return originalMethod.call(_this); });
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        var originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPagePrerenderSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
export function OnPageUnloaded() {
    return function (target, propertyKey, descriptor) {
        var originalMethod = descriptor.value;
        var onPageUnloadedSubscription;
        if (!target.ngOnInit) {
            buildNewMethodNgOnInit(target);
        }
        var originalNgOnInit = target.ngOnInit;
        target.ngOnInit = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageUnloadedSubscription = pageVisibilityService.$onPageUnloaded.subscribe(function () { return originalMethod.call(_this); });
            if (originalNgOnInit) {
                originalNgOnInit.call(this, args);
            }
        };
        if (!target.ngOnDestroy) {
            buildNewMethodNgOnDestroy(target);
        }
        var originalNgOnDestroy = target.ngOnDestroy;
        target.ngOnDestroy = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            onPageUnloadedSubscription.unsubscribe();
            if (originalNgOnDestroy) {
                originalNgOnDestroy.call(this, args);
            }
        };
    };
}
function buildNewMethodNgOnInit(target) {
    newMethod(target, 'ngOnInit');
}
function buildNewMethodNgOnDestroy(target) {
    newMethod(target, 'ngOnDestroy');
}
function newMethod(target, name) {
    Object.defineProperty(target, name, {
        value: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        },
        writable: true,
    });
}
//# sourceMappingURL=data:application/json;base64,